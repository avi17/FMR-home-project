{"ast":null,"code":"import { createFeatureSelector, createSelector, createReducer, on } from \"@ngrx/store\";\nimport * as fromActions from \"./user.actions\";\nimport * as fromAdapter from \"./user.adapter\";\nimport * as ordersFromReducer from \"../orders/orders.reducer\";\nexport const initialState = fromAdapter.adapter.getInitialState({\n  selectedUserId: \"\"\n});\n// Creating reducer\nconst _UserReducer = createReducer(initialState, on(fromActions.AddUser, (state, {\n  payload\n}) => fromAdapter.adapter.addOne(payload.user, state)), on(fromActions.AddUsers, (state, {\n  payload\n}) => fromAdapter.adapter.addMany(payload.users, state)), on(fromActions.UpdateUser, (state, {\n  payload\n}) => fromAdapter.adapter.updateOne(payload.user, state)), on(fromActions.UpdateUsers, (state, {\n  payload\n}) => fromAdapter.adapter.updateMany(payload.users, state)), on(fromActions.RemoveUser, (state, {\n  payload\n}) => fromAdapter.adapter.removeOne(payload.id, state)), on(fromActions.RemoveUsers, (state, {\n  payload\n}) => fromAdapter.adapter.removeMany(payload.ids, state)), on(fromActions.ClearUsers, state => fromAdapter.adapter.removeAll({\n  ...state,\n  selectedUserId: \"\"\n})), on(fromActions.LoadUsersSuccess, (state, {\n  payload\n}) => {\n  state = fromAdapter.adapter.removeAll({\n    ...state,\n    selectedUserId: \"\"\n  });\n  return fromAdapter.adapter.addMany(payload.users, state);\n}), on(fromActions.SelectUser, (state, {\n  payload\n}) => Object.assign({\n  ...state,\n  selectedUserId: payload.userId\n})), on(fromActions.SelectUser, (state, {\n  payload\n}) => {\n  return Object.assign({\n    ...state,\n    selectedUserId: payload.userId\n  });\n}));\nexport function userReducer(state, action) {\n  return _UserReducer(state, action);\n}\n// Creating selectors\nexport const getSelectedUserId = state => state.selectedUserId;\nexport const getUserState = createFeatureSelector(\"userState\");\nexport const selectUserIds = createSelector(getUserState, fromAdapter.selectUserIds);\nexport const selectUserEntities = createSelector(getUserState, fromAdapter.selectUserEntities);\nexport const selectAllUsers = createSelector(getUserState, fromAdapter.selectAllUsers);\nexport const UsersCount = createSelector(getUserState, fromAdapter.userCount);\nexport const selectCurrentUserId = createSelector(getUserState, getSelectedUserId);\nexport const selectCurrentUser = createSelector(selectUserEntities, selectCurrentUserId, (userEntities, userId) => userEntities[userId]);\nexport const selectCurrentUserWithOrder = createSelector(ordersFromReducer.selectOrderEntities, selectUserEntities, selectCurrentUserId, ordersFromReducer.selectCurrentOrderByUser, (state, user, orders) => {\n  console.log(\"state\" + state);\n  console.log(\"user\" + user);\n  console.log(\"user\" + orders);\n  if (orders === null) {\n    return {\n      id: 0,\n      productName: \"\",\n      productCode: \"New\",\n      description: \"New user from user \" + user.selectedUserId,\n      starRating: 0\n    };\n  } else {\n    return orders;\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}