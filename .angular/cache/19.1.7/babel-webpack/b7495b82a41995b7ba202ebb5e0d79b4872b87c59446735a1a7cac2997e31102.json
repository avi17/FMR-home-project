{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { FormGroup, FormBuilder, FormControl } from \"@angular/forms\";\nimport { Store } from \"@ngrx/store\";\nimport * as fromReducer from \"../../store/users/user.reducer\";\nimport * as fromActions from \"../../store/users/user.actions\";\nimport { UserObject } from \"src/app/store/modal/user.modal\";\nlet UserComponent = class UserComponent {\n  constructor(formBuilder, store) {\n    this.formBuilder = formBuilder;\n    this.store = store;\n    this.task = \"\";\n    this.userForm = {};\n    this.contactForm = new FormGroup({\n      firstname: new FormControl(),\n      lastname: new FormControl(),\n      email: new FormControl(),\n      gender: new FormControl(),\n      isMarried: new FormControl(),\n      country: new FormControl()\n    });\n    this.allUsers$ = store.select(fromReducer.selectAllUsers);\n    //this.allUsers$.subscribe((res) => console.log(res));\n    this.count$ = store.select(fromReducer.UsersCount);\n    this.userIds$ = store.select(fromReducer.selectUserIds);\n    this.userById$ = store.select(fromReducer.selectCurrentUser);\n    this.orderById$ = store.select(fromReducer.selectCurrentUserWithOrder);\n    this.userId = 0;\n  }\n  onSubmit() {\n    console.log(this.contactForm.value);\n  }\n  ngOnInit() {\n    this.store.dispatch(fromActions.LoadUsers());\n  }\n  createBlankUserForm() {\n    this.userForm = this.formBuilder.group({\n      usersArray: this.formBuilder.array([])\n    });\n  }\n  createUserFormForAdd() {\n    this.createBlankUserForm();\n    this.addMoreControlForAdd();\n  }\n  get usersFormArray() {\n    console.log(\"@hereee\");\n    return this.userForm?.get(\"usersArray\");\n  }\n  addMoreControlForAdd() {\n    let ag = this.formBuilder.group(new UserObject());\n    this.usersFormArray.push(ag);\n  }\n  updateUserForm() {\n    this.createBlankUserForm();\n    this.allUsers$.subscribe(users => {\n      console.log(\"updateUserForm\" + users);\n      if (users && users.length > 0) {\n        let user = users[0];\n        console.log(\"updateUserForm\" + user);\n        let ag = this.formBuilder.group(user);\n        this.usersFormArray.push(ag);\n      }\n    });\n  }\n  addMoreControlForUpdate() {\n    this.allUsers$.subscribe(users => {\n      if (users && users.length > 0 && this.usersFormArray?.length < users.length) {\n        let len = this.usersFormArray.length;\n        let User = users[len];\n        let ag = this.formBuilder.group(User);\n        this.usersFormArray.push(ag);\n      }\n    });\n  }\n  deleteFormArrayControl(idx) {\n    this.usersFormArray.removeAt(idx);\n  }\n  addUserView() {\n    this.task = \"add\";\n    this.createUserFormForAdd();\n  }\n  updateUserView() {\n    this.task = \"update\";\n    this.updateUserForm();\n  }\n  removeUserView() {\n    this.task = \"remove\";\n    this.createBlankUserForm();\n    this.allUsers$.subscribe(users => {\n      this.createBlankUserForm();\n      users.forEach(User => {\n        let ag = this.formBuilder.group({\n          UserData: User,\n          chk: false\n        });\n        this.usersFormArray.push(ag);\n      });\n    });\n  }\n  userByIdView() {\n    this.task = \"select\";\n  }\n  userOrderByIdView() {\n    this.task = \"selectOrder\";\n  }\n  onFormSubmitForAdd() {\n    if (this.usersFormArray.length === 1) {\n      this.addUser(this.usersFormArray.at(0).value);\n    } else if (this.usersFormArray.length > 1) {\n      this.addUsers(this.usersFormArray.value);\n    }\n    this.createBlankUserForm();\n    this.loadAllUsers();\n  }\n  onFormSubmitForUpdate() {\n    if (this.usersFormArray.length === 1) {\n      this.updateUser(this.usersFormArray.at(0).value);\n    } else if (this.usersFormArray.length > 1) {\n      this.updateUsers(this.usersFormArray.value);\n    }\n    this.createBlankUserForm();\n    this.loadAllUsers();\n  }\n  onFormSubmitForRemove() {\n    let UserIdsToDelete = [];\n    this.usersFormArray.controls.forEach(result => {\n      if (result.get(\"chk\")?.value) {\n        UserIdsToDelete.push(result.get(\"UserData\")?.value.id);\n      }\n    });\n    if (UserIdsToDelete.length == 1) {\n      this.removeUser(UserIdsToDelete[0]);\n    } else if (UserIdsToDelete.length > 1) {\n      this.removeUsers(UserIdsToDelete);\n    }\n  }\n  addUser(data) {\n    if (data == null) return;\n    this.store.dispatch(fromActions.AddUser({\n      payload: {\n        user: data\n      }\n    }));\n  }\n  addUsers(data) {\n    if (data == null) return;\n    this.store.dispatch(fromActions.AddUsers({\n      payload: {\n        users: data\n      }\n    }));\n  }\n  updateUser(data) {\n    if (data == null) return;\n    this.store.dispatch(fromActions.UpdateUser({\n      payload: {\n        user: {\n          id: data.id,\n          changes: data\n        }\n      }\n    }));\n  }\n  updateUsers(data) {\n    if (data == null) return;\n    let allUpdates = data.map(User => Object.assign({}, {\n      id: User.id,\n      changes: User\n    }));\n    this.store.dispatch(fromActions.UpdateUsers({\n      payload: {\n        users: allUpdates\n      }\n    }));\n  }\n  removeUser(userId) {\n    if (userId == null) return;\n    this.store.dispatch(fromActions.RemoveUser({\n      payload: {\n        id: userId\n      }\n    }));\n  }\n  removeUsers(userIds) {\n    if (userIds == null) return;\n    this.store.dispatch(fromActions.RemoveUsers({\n      payload: {\n        ids: userIds\n      }\n    }));\n  }\n  clearAllUsers() {\n    this.store.dispatch(fromActions.ClearUsers());\n  }\n  loadAllUsers() {\n    this.task = \"all\";\n  }\n  selectUserById() {\n    this.store.dispatch(fromActions.SelectUser({\n      payload: {\n        userId: this.userId\n      }\n    }));\n  }\n  selectUserAndOrderById() {\n    this.store.dispatch(fromActions.SelectUserOrderById({\n      payload: {\n        userId: this.userId\n      }\n    }));\n  }\n};\nUserComponent = __decorate([Component({\n  selector: \"app-users\",\n  templateUrl: \"users.component.html\",\n  imports: [],\n  styleUrls: [\"./users.component.css\"],\n  standalone: false\n}), __metadata(\"design:paramtypes\", [FormBuilder, Store])], UserComponent);\nexport { UserComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}