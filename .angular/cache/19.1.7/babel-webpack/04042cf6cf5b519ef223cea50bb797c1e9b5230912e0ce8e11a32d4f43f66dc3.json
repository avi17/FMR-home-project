{"ast":null,"code":"import { FormBuilder } from \"@angular/forms\";\nimport { Store } from \"@ngrx/store\";\nimport * as fromReducer from \"../../store/users/user.reducer\";\nimport * as fromActions from \"../../store/users/user.actions\";\nimport { UserObject } from \"../../store/modal/user.modal\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"@angular/common\";\nfunction UserComponent_ng_template_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"b\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"br\")(4, \"br\");\n    i0.ɵɵelementStart(5, \"b\");\n    i0.ɵɵtext(6, \"Ids:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"async\");\n    i0.ɵɵelement(9, \"br\")(10, \"br\");\n    i0.ɵɵelementStart(11, \"b\");\n    i0.ɵɵtext(12, \"Details:\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"Total Count: \", i0.ɵɵpipeBind1(2, 2, ctx_r0.count$), \"\");\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(8, 4, ctx_r0.userIds$), \" \");\n  }\n}\nexport let UserComponent = /*#__PURE__*/(() => {\n  class UserComponent {\n    constructor(formBuilder, store) {\n      this.formBuilder = formBuilder;\n      this.store = store;\n      this.task = \"\";\n      this.userForm = {};\n      this.allUsers$ = store.select(fromReducer.selectAllUsers);\n      this.allUsers$.subscribe(res => console.log(res));\n      this.count$ = store.select(fromReducer.UsersCount);\n      console.log(\"@@here\");\n      // store.select(fromReducer.selectAllUsers).subscribe((data) => {\n      //   alert(data);\n      //   let jobs: any[] = data;\n      //   console.log(\"eee\" + jobs);\n      //   console.log(\"eee\" + jobs.length);\n      // });\n      this.userIds$ = store.select(fromReducer.selectUserIds);\n      this.userById$ = store.select(fromReducer.selectCurrentUser);\n      this.userId = 0;\n    }\n    ngOnInit() {\n      this.store.dispatch(fromActions.LoadUsers());\n    }\n    createBlankUserForm() {\n      this.userForm = this.formBuilder.group({\n        UsersArray: this.formBuilder.array([])\n      });\n    }\n    createUserFormForAdd() {\n      this.createBlankUserForm();\n      this.addMoreControlForAdd();\n    }\n    get UsersFormArray() {\n      return this.userForm.get(\"UsersArray\");\n    }\n    addMoreControlForAdd() {\n      let ag = this.formBuilder.group(new UserObject());\n      this.UsersFormArray.push(ag);\n    }\n    updateUserForm() {\n      this.createBlankUserForm();\n      this.allUsers$.subscribe(Users => {\n        if (Users && Users.length > 0) {\n          let User = Users[0];\n          let ag = this.formBuilder.group(User);\n          this.UsersFormArray.push(ag);\n        }\n      });\n    }\n    addMoreControlForUpdate() {\n      this.allUsers$.subscribe(Users => {\n        if (Users && Users.length > 0 && this.UsersFormArray.length < Users.length) {\n          let len = this.UsersFormArray.length;\n          let User = Users[len];\n          let ag = this.formBuilder.group(User);\n          this.UsersFormArray.push(ag);\n        }\n      });\n    }\n    deleteFormArrayControl(idx) {\n      this.UsersFormArray.removeAt(idx);\n    }\n    addUserView() {\n      this.task = \"add\";\n      this.createUserFormForAdd();\n    }\n    updateUserView() {\n      this.task = \"update\";\n      this.updateUserForm();\n    }\n    removeUserView() {\n      this.task = \"remove\";\n      this.createBlankUserForm();\n      this.allUsers$.subscribe(Users => {\n        this.createBlankUserForm();\n        Users.forEach(User => {\n          let ag = this.formBuilder.group({\n            UserData: User,\n            chk: false\n          });\n          this.UsersFormArray.push(ag);\n        });\n      });\n    }\n    userByIdView() {\n      this.task = \"select\";\n    }\n    onFormSubmitForAdd() {\n      if (this.UsersFormArray.length === 1) {\n        this.addUser(this.UsersFormArray.at(0).value);\n      } else if (this.UsersFormArray.length > 1) {\n        this.addUsers(this.UsersFormArray.value);\n      }\n      this.createBlankUserForm();\n      this.loadAllUsers();\n    }\n    onFormSubmitForUpdate() {\n      if (this.UsersFormArray.length === 1) {\n        this.updateUser(this.UsersFormArray.at(0).value);\n      } else if (this.UsersFormArray.length > 1) {\n        this.updateUsers(this.UsersFormArray.value);\n      }\n      this.createBlankUserForm();\n      this.loadAllUsers();\n    }\n    onFormSubmitForRemove() {\n      let UserIdsToDelete = [];\n      this.UsersFormArray.controls.forEach(result => {\n        if (result.get(\"chk\")?.value) {\n          UserIdsToDelete.push(result.get(\"UserData\")?.value.id);\n        }\n      });\n      if (UserIdsToDelete.length == 1) {\n        this.removeUser(UserIdsToDelete[0]);\n      } else if (UserIdsToDelete.length > 1) {\n        this.removeUsers(UserIdsToDelete);\n      }\n    }\n    addUser(data) {\n      this.store.dispatch(fromActions.AddUser({\n        payload: {\n          user: data\n        }\n      }));\n    }\n    addUsers(data) {\n      this.store.dispatch(fromActions.AddUsers({\n        payload: {\n          users: data\n        }\n      }));\n    }\n    updateUser(data) {\n      this.store.dispatch(fromActions.UpdateUser({\n        payload: {\n          user: {\n            id: data.id,\n            changes: data\n          }\n        }\n      }));\n    }\n    updateUsers(data) {\n      let allUpdates = data.map(User => Object.assign({}, {\n        id: User.id,\n        changes: User\n      }));\n      this.store.dispatch(fromActions.UpdateUsers({\n        payload: {\n          users: allUpdates\n        }\n      }));\n    }\n    removeUser(userId) {\n      this.store.dispatch(fromActions.RemoveUser({\n        payload: {\n          id: userId\n        }\n      }));\n    }\n    removeUsers(userIds) {\n      this.store.dispatch(fromActions.RemoveUsers({\n        payload: {\n          ids: userIds\n        }\n      }));\n    }\n    clearAllUsers() {\n      this.store.dispatch(fromActions.ClearUsers());\n    }\n    loadAllUsers() {\n      this.task = \"all\";\n    }\n    selectUserById() {\n      this.store.dispatch(fromActions.SelectUser({\n        payload: {\n          userId: this.userId\n        }\n      }));\n    }\n    static {\n      this.ɵfac = function UserComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || UserComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Store));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: UserComponent,\n        selectors: [[\"app-users\"]],\n        standalone: false,\n        decls: 15,\n        vars: 1,\n        consts: [[3, \"click\"], [3, \"ngSwitch\"], [\"ngSwitchCase\", \"all\"]],\n        template: function UserComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"h5\");\n            i0.ɵɵtext(1, \"dsfsdf\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(2, \"button\", 0);\n            i0.ɵɵlistener(\"click\", function UserComponent_Template_button_click_2_listener() {\n              return ctx.loadAllUsers();\n            });\n            i0.ɵɵtext(3, \"Show All Users\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"button\", 0);\n            i0.ɵɵlistener(\"click\", function UserComponent_Template_button_click_4_listener() {\n              return ctx.addUserView();\n            });\n            i0.ɵɵtext(5, \"Add User\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"button\", 0);\n            i0.ɵɵlistener(\"click\", function UserComponent_Template_button_click_6_listener() {\n              return ctx.updateUserView();\n            });\n            i0.ɵɵtext(7, \"Update User\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(8, \"button\", 0);\n            i0.ɵɵlistener(\"click\", function UserComponent_Template_button_click_8_listener() {\n              return ctx.removeUserView();\n            });\n            i0.ɵɵtext(9, \"Remove User\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(10, \"button\", 0);\n            i0.ɵɵlistener(\"click\", function UserComponent_Template_button_click_10_listener() {\n              return ctx.userByIdView();\n            });\n            i0.ɵɵtext(11, \"Select User By Id\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(12, \"hr\");\n            i0.ɵɵelementStart(13, \"div\", 1);\n            i0.ɵɵtemplate(14, UserComponent_ng_template_14_Template, 13, 6, \"ng-template\", 2);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(13);\n            i0.ɵɵproperty(\"ngSwitch\", ctx.task);\n          }\n        },\n        dependencies: [i3.NgSwitch, i3.NgSwitchCase, i3.AsyncPipe],\n        encapsulation: 2\n      });\n    }\n  }\n  return UserComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}