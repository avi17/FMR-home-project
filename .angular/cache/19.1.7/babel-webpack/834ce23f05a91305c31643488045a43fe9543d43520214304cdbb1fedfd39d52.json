{"ast":null,"code":"import { createFeatureSelector, createSelector, createReducer, on } from \"@ngrx/store\";\nimport * as fromActions from \"./user.actions\";\nimport * as fromAdapter from \"./user.adapter\";\nexport const initialState = fromAdapter.adapter.getInitialState({\n  selectedUserId: \"\"\n});\nconst defanceNullPayload = payload => {\n  if (payload != null || payload.user != null || payload.users != null || payload.id != null || payload.ids != null) return false;\n  return true;\n};\n// Creating reducer\nconst _UserReducer = createReducer(initialState, on(fromActions.AddUser, (state, {\n  payload\n}) => {\n  if (defanceNullPayload) if (state?.ids.filter(x => x == payload?.user?.id)) {\n    const data = {\n      id: payload.user.id,\n      changes: payload.user\n    };\n    return fromAdapter.adapter.updateOne(data, state);\n  }\n  return fromAdapter.adapter.addOne(payload.user, state);\n}),\n//     if (state.ids.filter(x=> x == payload.user.id)){\n//        const data = { id: payload.user.id, changes: payload.user };\n//       fromAdapter.adapter.updateOne( data , state);\n//     }\n//     else fromAdapter.adapter.addOne(payload.user, state)\n// ),\non(fromActions.AddUsers, (state, {\n  payload\n}) => fromAdapter.adapter.addMany(payload?.users, state)), on(fromActions.UpdateUser, (state, {\n  payload\n}) => fromAdapter.adapter.updateOne(payload?.user, state)), on(fromActions.UpdateUsers, (state, {\n  payload\n}) => fromAdapter.adapter.updateMany(payload?.users, state)), on(fromActions.RemoveUser, (state, {\n  payload\n}) => fromAdapter.adapter.removeOne(payload?.id, state)), on(fromActions.RemoveUsers, (state, {\n  payload\n}) => fromAdapter.adapter.removeMany(payload?.ids, state)), on(fromActions.ClearUsers, state => fromAdapter.adapter.removeAll({\n  ...state,\n  selectedUserId: \"\"\n})), on(fromActions.LoadUsersSuccess, (state, {\n  payload\n}) => {\n  state = fromAdapter.adapter.removeAll({\n    ...state,\n    selectedUserId: \"\"\n  });\n  return fromAdapter.adapter.addMany(payload?.users, state);\n}), on(fromActions.SelectUser, (state, {\n  payload\n}) => Object.assign({\n  ...state,\n  selectedUserId: payload.userId\n})));\nexport function userReducer(state, action) {\n  return _UserReducer(state, action);\n}\n// Creating selectors\nexport const getSelectedUserId = state => state.selectedUserId;\nexport const getUserState = createFeatureSelector(\"userState\");\nexport const selectUserIds = createSelector(getUserState, fromAdapter.selectUserIds);\nexport const selectUserEntities = createSelector(getUserState, fromAdapter.selectUserEntities);\nexport const selectAllUsers = createSelector(getUserState, fromAdapter.selectAllUsers);\nexport const UsersCount = createSelector(getUserState, fromAdapter.userCount);\nexport const selectCurrentUserId = createSelector(getUserState, getSelectedUserId);\nexport const selectCurrentUser = createSelector(selectUserEntities, selectCurrentUserId, (userEntities, userId) => userEntities[userId]);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}