{"ast":null,"code":"import { FormGroup, FormBuilder, FormControl } from \"@angular/forms\";\nimport { Store } from \"@ngrx/store\";\nimport * as fromReducer from \"../../store/users/user.reducer\";\nimport * as fromActions from \"../../store/users/user.actions\";\nimport { UserObject } from \"src/app/store/modal/user.modal\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@ngrx/store\";\nexport let UserComponent = /*#__PURE__*/(() => {\n  class UserComponent {\n    constructor(formBuilder, store) {\n      this.formBuilder = formBuilder;\n      this.store = store;\n      this.task = \"\";\n      this.userForm = {};\n      this.contactForm = new FormGroup({\n        firstname: new FormControl(),\n        lastname: new FormControl(),\n        email: new FormControl(),\n        gender: new FormControl(),\n        isMarried: new FormControl(),\n        country: new FormControl()\n      });\n      this.allUsers$ = store.select(fromReducer.selectAllUsers);\n      //this.allUsers$.subscribe((res) => console.log(res));\n      this.count$ = store.select(fromReducer.UsersCount);\n      this.userIds$ = store.select(fromReducer.selectUserIds);\n      this.userById$ = store.select(fromReducer.selectCurrentUser);\n      this.orderById$ = store.select(fromReducer.selectCurrentUserWithOrder);\n      this.userId = 0;\n    }\n    onSubmit() {\n      console.log(this.contactForm.value);\n    }\n    ngOnInit() {\n      this.store.dispatch(fromActions.LoadUsers());\n    }\n    createBlankUserForm() {\n      this.userForm = this.formBuilder.group({\n        usersArray: this.formBuilder.array([])\n      });\n    }\n    createUserFormForAdd() {\n      this.createBlankUserForm();\n      this.addMoreControlForAdd();\n    }\n    get usersFormArray() {\n      console.log(\"@hereee\");\n      return this.userForm?.get(\"usersArray\");\n    }\n    addMoreControlForAdd() {\n      let ag = this.formBuilder.group(new UserObject());\n      this.usersFormArray.push(ag);\n    }\n    updateUserForm() {\n      this.createBlankUserForm();\n      this.allUsers$.subscribe(users => {\n        console.log(\"updateUserForm\" + users);\n        if (users && users.length > 0) {\n          let user = users[0];\n          console.log(\"updateUserForm\" + user);\n          let ag = this.formBuilder.group(user);\n          this.usersFormArray.push(ag);\n        }\n      });\n    }\n    addMoreControlForUpdate() {\n      this.allUsers$.subscribe(users => {\n        if (users && users.length > 0 && this.usersFormArray?.length < users.length) {\n          let len = this.usersFormArray.length;\n          let User = users[len];\n          let ag = this.formBuilder.group(User);\n          this.usersFormArray.push(ag);\n        }\n      });\n    }\n    deleteFormArrayControl(idx) {\n      this.usersFormArray.removeAt(idx);\n    }\n    addUserView() {\n      this.task = \"add\";\n      this.createUserFormForAdd();\n    }\n    updateUserView() {\n      this.task = \"update\";\n      this.updateUserForm();\n    }\n    removeUserView() {\n      this.task = \"remove\";\n      this.createBlankUserForm();\n      this.allUsers$.subscribe(users => {\n        this.createBlankUserForm();\n        users.forEach(User => {\n          let ag = this.formBuilder.group({\n            UserData: User,\n            chk: false\n          });\n          this.usersFormArray.push(ag);\n        });\n      });\n    }\n    userByIdView() {\n      this.task = \"select\";\n    }\n    userOrderByIdView() {\n      this.task = \"selectOrder\";\n    }\n    onFormSubmitForAdd() {\n      if (this.usersFormArray.length === 1) {\n        this.addUser(this.usersFormArray.at(0).value);\n      } else if (this.usersFormArray.length > 1) {\n        this.addUsers(this.usersFormArray.value);\n      }\n      this.createBlankUserForm();\n      this.loadAllUsers();\n    }\n    onFormSubmitForUpdate() {\n      if (this.usersFormArray.length === 1) {\n        this.updateUser(this.usersFormArray.at(0).value);\n      } else if (this.usersFormArray.length > 1) {\n        this.updateUsers(this.usersFormArray.value);\n      }\n      this.createBlankUserForm();\n      this.loadAllUsers();\n    }\n    onFormSubmitForRemove() {\n      let UserIdsToDelete = [];\n      this.usersFormArray.controls.forEach(result => {\n        if (result.get(\"chk\")?.value) {\n          UserIdsToDelete.push(result.get(\"UserData\")?.value.id);\n        }\n      });\n      if (UserIdsToDelete.length == 1) {\n        this.removeUser(UserIdsToDelete[0]);\n      } else if (UserIdsToDelete.length > 1) {\n        this.removeUsers(UserIdsToDelete);\n      }\n    }\n    addUser(data) {\n      if (data == null) return;\n      this.store.dispatch(fromActions.AddUser({\n        payload: {\n          user: data\n        }\n      }));\n    }\n    addUsers(data) {\n      if (data == null) return;\n      this.store.dispatch(fromActions.AddUsers({\n        payload: {\n          users: data\n        }\n      }));\n    }\n    updateUser(data) {\n      if (data == null) return;\n      this.store.dispatch(fromActions.UpdateUser({\n        payload: {\n          user: {\n            id: data.id,\n            changes: data\n          }\n        }\n      }));\n    }\n    updateUsers(data) {\n      if (data == null) return;\n      let allUpdates = data.map(User => Object.assign({}, {\n        id: User.id,\n        changes: User\n      }));\n      this.store.dispatch(fromActions.UpdateUsers({\n        payload: {\n          users: allUpdates\n        }\n      }));\n    }\n    removeUser(userId) {\n      if (userId == null) return;\n      this.store.dispatch(fromActions.RemoveUser({\n        payload: {\n          id: userId\n        }\n      }));\n    }\n    removeUsers(userIds) {\n      if (userIds == null) return;\n      this.store.dispatch(fromActions.RemoveUsers({\n        payload: {\n          ids: userIds\n        }\n      }));\n    }\n    clearAllUsers() {\n      this.store.dispatch(fromActions.ClearUsers());\n    }\n    loadAllUsers() {\n      this.task = \"all\";\n    }\n    selectUserById() {\n      this.store.dispatch(fromActions.SelectUser({\n        payload: {\n          userId: this.userId\n        }\n      }));\n    }\n    selectUserAndOrderById() {\n      this.store.dispatch(fromActions.SelectUserOrderById({\n        payload: {\n          userId: this.userId\n        }\n      }));\n    }\n    static {\n      this.ɵfac = function UserComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || UserComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Store));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: UserComponent,\n        selectors: [[\"app-users\"]],\n        standalone: false,\n        decls: 39,\n        vars: 1,\n        consts: [[3, \"ngSubmit\", \"formGroup\"], [\"for\", \"firstname\"], [\"type\", \"text\", \"id\", \"firstname\", \"name\", \"firstname\", \"formControlName\", \"firstname\"], [\"for\", \"lastname\"], [\"type\", \"text\", \"id\", \"lastname\", \"name\", \"lastname\", \"formControlName\", \"lastname\"], [\"for\", \"email\"], [\"type\", \"text\", \"id\", \"email\", \"name\", \"email\", \"formControlName\", \"email\"], [\"for\", \"gender\"], [\"type\", \"radio\", \"value\", \"male\", \"id\", \"gender\", \"name\", \"gender\", \"formControlName\", \"gender\"], [\"type\", \"radio\", \"value\", \"female\", \"id\", \"gender\", \"name\", \"gender\", \"formControlName\", \"gender\"], [\"for\", \"isMarried\"], [\"type\", \"checkbox\", \"id\", \"isMarried\", \"name\", \"isMarried\", \"formControlName\", \"isMarried\"], [\"for\", \"country\"], [\"id\", \"country\", \"name\", \"country\", \"formControlName\", \"country\"], [\"value\", \"1\"], [\"value\", \"2\"], [\"value\", \"3\"], [\"value\", \"4\"], [\"type\", \"submit\"]],\n        template: function UserComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"form\", 0);\n            i0.ɵɵlistener(\"ngSubmit\", function UserComponent_Template_form_ngSubmit_0_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(1, \"p\")(2, \"label\", 1);\n            i0.ɵɵtext(3, \"First Name \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(4, \"input\", 2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(5, \"p\")(6, \"label\", 3);\n            i0.ɵɵtext(7, \"Last Name \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(8, \"input\", 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(9, \"p\")(10, \"label\", 5);\n            i0.ɵɵtext(11, \"Email \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(12, \"input\", 6);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(13, \"p\")(14, \"label\", 7);\n            i0.ɵɵtext(15, \"Geneder \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(16, \"input\", 8);\n            i0.ɵɵtext(17, \" Male \");\n            i0.ɵɵelement(18, \"input\", 9);\n            i0.ɵɵtext(19, \" Female \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(20, \"p\")(21, \"label\", 10);\n            i0.ɵɵtext(22, \"Married \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(23, \"input\", 11);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(24, \"p\")(25, \"label\", 12);\n            i0.ɵɵtext(26, \"country \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(27, \"select\", 13)(28, \"option\", 14);\n            i0.ɵɵtext(29, \"India\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(30, \"option\", 15);\n            i0.ɵɵtext(31, \"USA\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(32, \"option\", 16);\n            i0.ɵɵtext(33, \"England\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(34, \"option\", 17);\n            i0.ɵɵtext(35, \"Singapore\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(36, \"p\")(37, \"button\", 18);\n            i0.ɵɵtext(38, \"Submit\");\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵproperty(\"formGroup\", ctx.contactForm);\n          }\n        },\n        dependencies: [i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.CheckboxControlValueAccessor, i1.SelectControlValueAccessor, i1.RadioControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n        encapsulation: 2\n      });\n    }\n  }\n  return UserComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}