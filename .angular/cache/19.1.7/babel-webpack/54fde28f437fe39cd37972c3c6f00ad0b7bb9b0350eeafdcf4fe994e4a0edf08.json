{"ast":null,"code":"import { Actions, createEffect, ofType } from \"@ngrx/effects\";\nimport { distinctUntilChanged, filter, map, switchMap, tap } from \"rxjs/operators\";\nimport * as fromActions from \"./user.actions\";\nimport { AppService } from \"../app.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../app.service\";\nexport let UserEffects = /*#__PURE__*/(() => {\n  class UserEffects {\n    constructor(actions$, appService) {\n      this.actions$ = actions$;\n      this.appService = appService;\n      this.loadAllUsers$ = createEffect(() => this.actions$.pipe(ofType(fromActions.LoadUsers), tap(console.log), switchMap(() => this.appService.getAllUsers().pipe(tap(console.log), map(data => fromActions.LoadUsersSuccess({\n        payload: {\n          users: data\n        }\n      })), tap(console.log)))));\n    }\n    getUserDetails(userId) {\n      return this.http.get(`urlTo/${userId}`);\n    }\n    listenToUserChanges() {\n      return this.store.select('selectedUserId').pipe(distinctUntilChanged(),\n      // מונע קריאות כפולות אם ה-ID לא השתנה\n      filter(userId => !!userId),\n      // מבטיח שהערך אינו ריק\n      switchMap(userId => this.getUserDetails(userId)) // ביטול קריאה קודמת במקרה של שינוי\n      );\n    }\n    static {\n      this.ɵfac = function UserEffects_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || UserEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AppService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: UserEffects,\n        factory: UserEffects.ɵfac\n      });\n    }\n  }\n  return UserEffects;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}