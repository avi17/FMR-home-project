{"ast":null,"code":"import { FormBuilder } from \"@angular/forms\";\nimport { Store } from \"@ngrx/store\";\nimport { Observable } from \"rxjs\";\nimport * as fromReducer from \"../../store/orders/orders.reducer\";\nimport * as fromActions from \"../../store/orders/orders.actions\";\nimport * as userFromReducer from \"../../store/users/user.reducer\";\nimport { OrderObject } from \"../../store/modal/order.modal\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"@angular/common\";\nfunction OrdersComponent_li_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const userOrder_r1 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate4(\" USERORDER: \", userOrder_r1 == null ? null : userOrder_r1.id, \" - \", userOrder_r1 == null ? null : userOrder_r1.name, \" - \", userOrder_r1 == null ? null : userOrder_r1.total, \" - \", userOrder_r1 == null ? null : userOrder_r1.userId, \" \");\n  }\n}\nexport let OrdersComponent = /*#__PURE__*/(() => {\n  class OrdersComponent {\n    constructor(formBuilder, store) {\n      this.formBuilder = formBuilder;\n      this.store = store;\n      this.task = \"\";\n      this.orderForm = {};\n      this.allOrders$ = store.select(fromReducer.selectAllOrders);\n      //this.allOrders$.subscribe((res) => console.log(res));\n      this.count$ = store.select(fromReducer.OrdersCount);\n      this.orderIds$ = store.select(fromReducer.selectOrderIds);\n      this.orderById$ = store.select(fromReducer.selectCurrentOrder);\n      this.orderByUserId$ = store.select(fromReducer.selectCurrentOrderByUser);\n      this.orderAndUserByUserId$ = store.select(userFromReducer.selectCurrentUserWithOrder);\n      this.orderId = this.userId = 0;\n    }\n    ngOnInit() {\n      this.store.dispatch(fromActions.LoadOrders());\n    }\n    ngOnDestroy(e) {\n      alert(e);\n    }\n    createBlankOrderForm() {\n      this.orderForm = this.formBuilder.group({\n        ordersArray: this.formBuilder.array([])\n      });\n    }\n    createOrderFormForAdd() {\n      this.createBlankOrderForm();\n      this.addMoreControlForAdd();\n    }\n    get ordersFormArray() {\n      console.log(\"@hereee\");\n      return this.orderForm?.get(\"ordersArray\");\n    }\n    addMoreControlForAdd() {\n      let ag = this.formBuilder.group(new OrderObject());\n      this.ordersFormArray.push(ag);\n    }\n    updateOrderForm() {\n      this.createBlankOrderForm();\n      this.allOrders$.subscribe(orders => {\n        console.log(\"updateOrderForm\" + orders);\n        if (orders && orders.length > 0) {\n          let order = orders[0];\n          console.log(\"updateOrderForm\" + order);\n          let ag = this.formBuilder.group(order);\n          this.ordersFormArray.push(ag);\n        }\n      });\n    }\n    addMoreControlForUpdate() {\n      this.allOrders$.subscribe(orders => {\n        if (orders && orders.length > 0 && this.ordersFormArray?.length < orders.length) {\n          let len = this.ordersFormArray.length;\n          let Order = orders[len];\n          let ag = this.formBuilder.group(Order);\n          this.ordersFormArray.push(ag);\n        }\n      });\n    }\n    deleteFormArrayControl(idx) {\n      this.ordersFormArray.removeAt(idx);\n    }\n    addOrderView() {\n      this.task = \"add\";\n      this.createOrderFormForAdd();\n    }\n    updateOrderView() {\n      this.task = \"update\";\n      this.updateOrderForm();\n    }\n    removeOrderView() {\n      this.task = \"remove\";\n      this.createBlankOrderForm();\n      this.allOrders$.subscribe(orders => {\n        this.createBlankOrderForm();\n        orders.forEach(Order => {\n          let ag = this.formBuilder.group({\n            OrderData: Order,\n            chk: false\n          });\n          this.ordersFormArray.push(ag);\n        });\n      });\n    }\n    orderByIdView() {\n      this.task = \"select\";\n    }\n    orderByUserIdView() {\n      this.task = \"selectByUserId\";\n    }\n    onFormSubmitForAdd() {\n      if (this.ordersFormArray.length === 1) {\n        this.addOrder(this.ordersFormArray.at(0).value);\n      } else if (this.ordersFormArray.length > 1) {\n        this.addOrders(this.ordersFormArray.value);\n      }\n      this.createBlankOrderForm();\n      this.loadAllOrders();\n    }\n    onFormSubmitForUpdate() {\n      if (this.ordersFormArray.length === 1) {\n        this.updateOrder(this.ordersFormArray.at(0).value);\n      } else if (this.ordersFormArray.length > 1) {\n        this.updateOrders(this.ordersFormArray.value);\n      }\n      this.createBlankOrderForm();\n      this.loadAllOrders();\n    }\n    onFormSubmitForRemove() {\n      let OrderIdsToDelete = [];\n      this.ordersFormArray.controls.forEach(result => {\n        if (result.get(\"chk\")?.value) {\n          OrderIdsToDelete.push(result.get(\"OrderData\")?.value.id);\n        }\n      });\n      if (OrderIdsToDelete.length == 1) {\n        this.removeOrder(OrderIdsToDelete[0]);\n      } else if (OrderIdsToDelete.length > 1) {\n        this.removeOrders(OrderIdsToDelete);\n      }\n    }\n    addOrder(data) {\n      if (data == null) return;\n      this.store.dispatch(fromActions.AddOrder({\n        payload: {\n          order: data\n        }\n      }));\n    }\n    addOrders(data) {\n      if (data == null) return;\n      this.store.dispatch(fromActions.AddOrders({\n        payload: {\n          orders: data\n        }\n      }));\n    }\n    updateOrder(data) {\n      if (data == null) return;\n      this.store.dispatch(fromActions.UpdateOrder({\n        payload: {\n          order: {\n            id: data.id,\n            changes: data\n          }\n        }\n      }));\n    }\n    updateOrders(data) {\n      if (data == null) return;\n      let allUpdates = data.map(Order => Object.assign({}, {\n        id: Order.id,\n        changes: Order\n      }));\n      this.store.dispatch(fromActions.UpdateOrders({\n        payload: {\n          orders: allUpdates\n        }\n      }));\n    }\n    removeOrder(orderId) {\n      if (orderId == null) return;\n      this.store.dispatch(fromActions.RemoveOrder({\n        payload: {\n          id: orderId\n        }\n      }));\n    }\n    removeOrders(orderIds) {\n      if (orderIds == null) return;\n      this.store.dispatch(fromActions.RemoveOrders({\n        payload: {\n          ids: orderIds\n        }\n      }));\n    }\n    clearAllOrders() {\n      this.store.dispatch(fromActions.ClearOrders());\n    }\n    loadAllOrders() {\n      this.task = \"all\";\n    }\n    selectOrderById() {\n      this.store.dispatch(fromActions.SelectOrder({\n        payload: {\n          orderId: this.orderId\n        }\n      }));\n    }\n    selectOrderByUserId() {\n      console.log(\"here\");\n      //fromActions.SelectOrderByUserId({ payload: { userId: this.userId } });\n      //this.store.select(fromReducer.selectCurrentOrderByUser(this.userId));\n      this.store.dispatch(fromActions.SelectOrderByUserId({\n        payload: {\n          userId: this.userId\n        }\n      }));\n    }\n    static {\n      this.ɵfac = function OrdersComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || OrdersComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Store));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: OrdersComponent,\n        selectors: [[\"user-orders\"]],\n        standalone: false,\n        decls: 5,\n        vars: 3,\n        consts: [[4, \"ngFor\", \"ngForOf\"]],\n        template: function OrdersComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"h1\");\n            i0.ɵɵtext(1, \"Orders\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(2, \"ul\");\n            i0.ɵɵtemplate(3, OrdersComponent_li_3_Template, 2, 4, \"li\", 0);\n            i0.ɵɵpipe(4, \"async\");\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(4, 1, ctx.orderAndUserByUserId$));\n          }\n        },\n        dependencies: [i3.NgForOf, i3.AsyncPipe],\n        encapsulation: 2\n      });\n    }\n  }\n  return OrdersComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}