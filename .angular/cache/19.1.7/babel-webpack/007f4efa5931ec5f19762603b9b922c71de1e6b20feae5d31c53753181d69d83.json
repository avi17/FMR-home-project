{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Directive, Input, Component, inject, Optional, HostBinding, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { dom, config, icon, parse, counter, text } from '@fortawesome/fontawesome-svg-core';\nimport * as i2 from '@angular/platform-browser';\nconst _c0 = [\"*\"];\nconst faWarnIfIconDefinitionMissing = iconSpec => {\n  throw new Error(`Could not find icon with iconName=${iconSpec.iconName} and prefix=${iconSpec.prefix} in the icon library.`);\n};\nconst faWarnIfIconSpecMissing = () => {\n  throw new Error('Property `icon` is required for `fa-icon`/`fa-duotone-icon` components.');\n};\nconst isKnownRotateValue = rotate => rotate != null && (rotate === 90 || rotate === 180 || rotate === 270 || rotate === '90' || rotate === '180' || rotate === '270');\n/**\n * Fontawesome class list.\n * Returns classes array by props.\n */\nconst faClassList = props => {\n  const knownRotateValue = isKnownRotateValue(props.rotate);\n  const classes = {\n    [`fa-${props.animation}`]: props.animation != null && !props.animation.startsWith('spin'),\n    'fa-spin': props.animation === 'spin' || props.animation === 'spin-reverse',\n    'fa-spin-pulse': props.animation === 'spin-pulse' || props.animation === 'spin-pulse-reverse',\n    'fa-spin-reverse': props.animation === 'spin-reverse' || props.animation === 'spin-pulse-reverse',\n    // According to https://fontawesome.com/docs/web/style/animate#spin fa-pulse\n    // class is deprecated, remove the below line when Font Awesome 5 support\n    // is dropped.\n    'fa-pulse': props.animation === 'spin-pulse' || props.animation === 'spin-pulse-reverse',\n    'fa-fw': props.fixedWidth,\n    'fa-border': props.border,\n    'fa-inverse': props.inverse,\n    'fa-layers-counter': props.counter,\n    'fa-flip-horizontal': props.flip === 'horizontal' || props.flip === 'both',\n    'fa-flip-vertical': props.flip === 'vertical' || props.flip === 'both',\n    [`fa-${props.size}`]: props.size !== null,\n    [`fa-rotate-${props.rotate}`]: knownRotateValue,\n    'fa-rotate-by': props.rotate != null && !knownRotateValue,\n    [`fa-pull-${props.pull}`]: props.pull !== null,\n    [`fa-stack-${props.stackItemSize}`]: props.stackItemSize != null\n  };\n  return Object.keys(classes).map(key => classes[key] ? key : null).filter(key => key);\n};\nconst cssInserted = new WeakSet();\nconst autoCssId = 'fa-auto-css';\n/**\n * Ensure that Font Awesome CSS is inserted into the page.\n *\n * SVG Core has the same logic to insert the same styles into the page, however\n * it's not aware of Angular SSR and therefore styles won't be added in that\n * context leading to https://github.com/FortAwesome/angular-fontawesome/issues/48.\n * That's why the same logic is duplicated here.\n *\n * @param document - Document.\n * @param config - Font Awesome configuration.\n */\nfunction ensureCss(document, config) {\n  if (!config.autoAddCss) {\n    return;\n  }\n  if (cssInserted.has(document)) {\n    return;\n  }\n  // Prevent adding the same styles again after hydration.\n  if (document.getElementById(autoCssId) != null) {\n    config.autoAddCss = false;\n    cssInserted.add(document);\n    return;\n  }\n  const style = document.createElement('style');\n  style.setAttribute('type', 'text/css');\n  style.setAttribute('id', autoCssId);\n  style.innerHTML = dom.css();\n  const headChildren = document.head.childNodes;\n  let beforeChild = null;\n  for (let i = headChildren.length - 1; i > -1; i--) {\n    const child = headChildren[i];\n    const tagName = child.nodeName.toUpperCase();\n    if (['STYLE', 'LINK'].indexOf(tagName) > -1) {\n      beforeChild = child;\n    }\n  }\n  document.head.insertBefore(style, beforeChild);\n  // Prevent SVG Core from adding the same styles.\n  //\n  // As the logic is present in two places and SVG Core is not aware about\n  // this library, it may lead to styles being added twice. This can only\n  // occur when icon is rendered by SVG Core before the Angular component\n  // and should not have any significant negative impact. This is a rare\n  // use case, and it's tricky to prevent, so we accept this behavior. Consumer\n  // can choose to disable `FaConfig.autoAddCss` and add styles manually to\n  // prevent this from happening.\n  config.autoAddCss = false;\n  cssInserted.add(document);\n}\n\n/**\n * Returns if is IconLookup or not.\n */\nconst isIconLookup = i => i.prefix !== undefined && i.iconName !== undefined;\n\n/**\n * Normalizing icon spec.\n */\nconst faNormalizeIconSpec = (iconSpec, defaultPrefix) => {\n  if (isIconLookup(iconSpec)) {\n    return iconSpec;\n  }\n  if (Array.isArray(iconSpec) && iconSpec.length === 2) {\n    return {\n      prefix: iconSpec[0],\n      iconName: iconSpec[1]\n    };\n  }\n  return {\n    prefix: defaultPrefix,\n    iconName: iconSpec\n  };\n};\nlet FaConfig = /*#__PURE__*/(() => {\n  class FaConfig {\n    constructor() {\n      /**\n       * Default prefix to use, when one is not provided with the icon name.\n       *\n       * @default 'fas'\n       */\n      this.defaultPrefix = 'fas';\n      /**\n       * Provides a fallback icon to use whilst main icon is being loaded asynchronously.\n       * When value is null, then fa-icon component will throw an error if icon input is missing.\n       * When value is not null, then the provided icon will be used as a fallback icon if icon input is missing.\n       *\n       * @default null\n       */\n      this.fallbackIcon = null;\n      this._autoAddCss = true;\n    }\n    /**\n     * Automatically add Font Awesome styles to the document when icon is rendered.\n     *\n     * For the majority of the cases the automatically added CSS is sufficient,\n     * please refer to the linked guide for more information on when to disable\n     * this feature.\n     *\n     * @see {@link: https://github.com/FortAwesome/angular-fontawesome/blob/main/docs/guide/adding-css.md}\n     * @default true\n     */\n    set autoAddCss(value) {\n      config.autoAddCss = value;\n      this._autoAddCss = value;\n    }\n    get autoAddCss() {\n      return this._autoAddCss;\n    }\n    static {\n      this.ɵfac = function FaConfig_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || FaConfig)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: FaConfig,\n        factory: FaConfig.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return FaConfig;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet FaIconLibrary = /*#__PURE__*/(() => {\n  class FaIconLibrary {\n    constructor() {\n      this.definitions = {};\n    }\n    addIcons(...icons) {\n      for (const icon of icons) {\n        if (!(icon.prefix in this.definitions)) {\n          this.definitions[icon.prefix] = {};\n        }\n        this.definitions[icon.prefix][icon.iconName] = icon;\n        for (const alias of icon.icon[2]) {\n          if (typeof alias === 'string') {\n            this.definitions[icon.prefix][alias] = icon;\n          }\n        }\n      }\n    }\n    addIconPacks(...packs) {\n      for (const pack of packs) {\n        const icons = Object.keys(pack).map(key => pack[key]);\n        this.addIcons(...icons);\n      }\n    }\n    getIconDefinition(prefix, name) {\n      if (prefix in this.definitions && name in this.definitions[prefix]) {\n        return this.definitions[prefix][name];\n      }\n      return null;\n    }\n    static {\n      this.ɵfac = function FaIconLibrary_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || FaIconLibrary)();\n      };\n    }\n    static {\n      this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n        token: FaIconLibrary,\n        factory: FaIconLibrary.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return FaIconLibrary;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet FaStackItemSizeDirective = /*#__PURE__*/(() => {\n  class FaStackItemSizeDirective {\n    constructor() {\n      /**\n       * Specify whether icon inside {@link FaStackComponent} should be rendered in\n       * regular size (1x) or as a larger icon (2x).\n       */\n      this.stackItemSize = '1x';\n    }\n    ngOnChanges(changes) {\n      if ('size' in changes) {\n        throw new Error('fa-icon is not allowed to customize size when used inside fa-stack. ' + 'Set size on the enclosing fa-stack instead: <fa-stack size=\"4x\">...</fa-stack>.');\n      }\n    }\n    static {\n      this.ɵfac = function FaStackItemSizeDirective_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || FaStackItemSizeDirective)();\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: FaStackItemSizeDirective,\n        selectors: [[\"fa-icon\", \"stackItemSize\", \"\"], [\"fa-duotone-icon\", \"stackItemSize\", \"\"]],\n        inputs: {\n          stackItemSize: \"stackItemSize\",\n          size: \"size\"\n        },\n        features: [i0.ɵɵNgOnChangesFeature]\n      });\n    }\n  }\n  return FaStackItemSizeDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet FaStackComponent = /*#__PURE__*/(() => {\n  class FaStackComponent {\n    constructor(renderer, elementRef) {\n      this.renderer = renderer;\n      this.elementRef = elementRef;\n    }\n    ngOnInit() {\n      this.renderer.addClass(this.elementRef.nativeElement, 'fa-stack');\n    }\n    ngOnChanges(changes) {\n      if ('size' in changes) {\n        if (changes.size.currentValue != null) {\n          this.renderer.addClass(this.elementRef.nativeElement, `fa-${changes.size.currentValue}`);\n        }\n        if (changes.size.previousValue != null) {\n          this.renderer.removeClass(this.elementRef.nativeElement, `fa-${changes.size.previousValue}`);\n        }\n      }\n    }\n    static {\n      this.ɵfac = function FaStackComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || FaStackComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: FaStackComponent,\n        selectors: [[\"fa-stack\"]],\n        inputs: {\n          size: \"size\"\n        },\n        features: [i0.ɵɵNgOnChangesFeature],\n        ngContentSelectors: _c0,\n        decls: 1,\n        vars: 0,\n        template: function FaStackComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵprojection(0);\n          }\n        },\n        encapsulation: 2\n      });\n    }\n  }\n  return FaStackComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet FaIconComponent = /*#__PURE__*/(() => {\n  class FaIconComponent {\n    constructor(sanitizer, config, iconLibrary, stackItem, stack) {\n      this.sanitizer = sanitizer;\n      this.config = config;\n      this.iconLibrary = iconLibrary;\n      this.stackItem = stackItem;\n      this.document = inject(DOCUMENT);\n      if (stack != null && stackItem == null) {\n        console.error('FontAwesome: fa-icon and fa-duotone-icon elements must specify stackItemSize attribute when wrapped into ' + 'fa-stack. Example: <fa-icon stackItemSize=\"2x\"></fa-icon>.');\n      }\n    }\n    ngOnChanges(changes) {\n      if (this.icon == null && this.config.fallbackIcon == null) {\n        faWarnIfIconSpecMissing();\n        return;\n      }\n      if (changes) {\n        const iconDefinition = this.findIconDefinition(this.icon ?? this.config.fallbackIcon);\n        if (iconDefinition != null) {\n          const params = this.buildParams();\n          ensureCss(this.document, this.config);\n          const renderedIcon = icon(iconDefinition, params);\n          this.renderedIconHTML = this.sanitizer.bypassSecurityTrustHtml(renderedIcon.html.join('\\n'));\n        }\n      }\n    }\n    /**\n     * Programmatically trigger rendering of the icon.\n     *\n     * This method is useful, when creating {@link FaIconComponent} dynamically or\n     * changing its inputs programmatically as in these cases icon won't be\n     * re-rendered automatically.\n     */\n    render() {\n      this.ngOnChanges({});\n    }\n    findIconDefinition(i) {\n      const lookup = faNormalizeIconSpec(i, this.config.defaultPrefix);\n      if ('icon' in lookup) {\n        return lookup;\n      }\n      const definition = this.iconLibrary.getIconDefinition(lookup.prefix, lookup.iconName);\n      if (definition != null) {\n        return definition;\n      }\n      faWarnIfIconDefinitionMissing(lookup);\n      return null;\n    }\n    buildParams() {\n      const classOpts = {\n        flip: this.flip,\n        animation: this.animation,\n        border: this.border,\n        inverse: this.inverse,\n        size: this.size || null,\n        pull: this.pull || null,\n        rotate: this.rotate || null,\n        fixedWidth: typeof this.fixedWidth === 'boolean' ? this.fixedWidth : this.config.fixedWidth,\n        stackItemSize: this.stackItem != null ? this.stackItem.stackItemSize : null\n      };\n      const parsedTransform = typeof this.transform === 'string' ? parse.transform(this.transform) : this.transform;\n      const styles = {};\n      if (classOpts.rotate != null && !isKnownRotateValue(classOpts.rotate)) {\n        styles['--fa-rotate-angle'] = `${classOpts.rotate}`;\n      }\n      return {\n        title: this.title,\n        transform: parsedTransform,\n        classes: faClassList(classOpts),\n        mask: this.mask != null ? this.findIconDefinition(this.mask) : null,\n        symbol: this.symbol,\n        attributes: {\n          role: this.a11yRole\n        },\n        styles\n      };\n    }\n    static {\n      this.ɵfac = function FaIconComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || FaIconComponent)(i0.ɵɵdirectiveInject(i2.DomSanitizer), i0.ɵɵdirectiveInject(FaConfig), i0.ɵɵdirectiveInject(FaIconLibrary), i0.ɵɵdirectiveInject(FaStackItemSizeDirective, 8), i0.ɵɵdirectiveInject(FaStackComponent, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: FaIconComponent,\n        selectors: [[\"fa-icon\"]],\n        hostAttrs: [1, \"ng-fa-icon\"],\n        hostVars: 2,\n        hostBindings: function FaIconComponent_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵhostProperty(\"innerHTML\", ctx.renderedIconHTML, i0.ɵɵsanitizeHtml);\n            i0.ɵɵattribute(\"title\", ctx.title);\n          }\n        },\n        inputs: {\n          icon: \"icon\",\n          title: \"title\",\n          animation: \"animation\",\n          mask: \"mask\",\n          flip: \"flip\",\n          size: \"size\",\n          pull: \"pull\",\n          border: \"border\",\n          inverse: \"inverse\",\n          symbol: \"symbol\",\n          rotate: \"rotate\",\n          fixedWidth: \"fixedWidth\",\n          transform: \"transform\",\n          a11yRole: \"a11yRole\"\n        },\n        features: [i0.ɵɵNgOnChangesFeature],\n        decls: 0,\n        vars: 0,\n        template: function FaIconComponent_Template(rf, ctx) {},\n        encapsulation: 2\n      });\n    }\n  }\n  return FaIconComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet FaDuotoneIconComponent = /*#__PURE__*/(() => {\n  class FaDuotoneIconComponent extends FaIconComponent {\n    findIconDefinition(i) {\n      const definition = super.findIconDefinition(i);\n      if (definition != null && !Array.isArray(definition.icon[4])) {\n        throw new Error('The specified icon does not appear to be a Duotone icon. ' + 'Check that you specified the correct style: ' + `<fa-duotone-icon [icon]=\"['fad', '${definition.iconName}']\"></fa-duotone-icon> ` + `or use: <fa-icon icon=\"${definition.iconName}\"></fa-icon> instead.`);\n      }\n      return definition;\n    }\n    buildParams() {\n      const params = super.buildParams();\n      if (this.swapOpacity === true || this.swapOpacity === 'true') {\n        if (Array.isArray(params.classes)) {\n          params.classes.push('fa-swap-opacity');\n        } else if (typeof params.classes === 'string') {\n          params.classes = [params.classes, 'fa-swap-opacity'];\n        } else {\n          params.classes = ['fa-swap-opacity'];\n        }\n      }\n      if (params.styles == null) {\n        params.styles = {};\n      }\n      if (this.primaryOpacity != null) {\n        params.styles['--fa-primary-opacity'] = this.primaryOpacity.toString();\n      }\n      if (this.secondaryOpacity != null) {\n        params.styles['--fa-secondary-opacity'] = this.secondaryOpacity.toString();\n      }\n      if (this.primaryColor != null) {\n        params.styles['--fa-primary-color'] = this.primaryColor;\n      }\n      if (this.secondaryColor != null) {\n        params.styles['--fa-secondary-color'] = this.secondaryColor;\n      }\n      return params;\n    }\n    static {\n      this.ɵfac = /* @__PURE__ */(() => {\n        let ɵFaDuotoneIconComponent_BaseFactory;\n        return function FaDuotoneIconComponent_Factory(__ngFactoryType__) {\n          return (ɵFaDuotoneIconComponent_BaseFactory || (ɵFaDuotoneIconComponent_BaseFactory = i0.ɵɵgetInheritedFactory(FaDuotoneIconComponent)))(__ngFactoryType__ || FaDuotoneIconComponent);\n        };\n      })();\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: FaDuotoneIconComponent,\n        selectors: [[\"fa-duotone-icon\"]],\n        inputs: {\n          swapOpacity: \"swapOpacity\",\n          primaryOpacity: \"primaryOpacity\",\n          secondaryOpacity: \"secondaryOpacity\",\n          primaryColor: \"primaryColor\",\n          secondaryColor: \"secondaryColor\"\n        },\n        features: [i0.ɵɵInheritDefinitionFeature],\n        decls: 0,\n        vars: 0,\n        template: function FaDuotoneIconComponent_Template(rf, ctx) {},\n        encapsulation: 2\n      });\n    }\n  }\n  return FaDuotoneIconComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Warns if parent component not existing.\n */\nconst faWarnIfParentNotExist = (parent, parentName, childName) => {\n  if (!parent) {\n    throw new Error(`${childName} should be used as child of ${parentName} only.`);\n  }\n};\n\n/**\n * Fontawesome layers.\n */\nlet FaLayersComponent = /*#__PURE__*/(() => {\n  class FaLayersComponent {\n    constructor(renderer, elementRef, config) {\n      this.renderer = renderer;\n      this.elementRef = elementRef;\n      this.config = config;\n      this.document = inject(DOCUMENT);\n    }\n    ngOnInit() {\n      this.renderer.addClass(this.elementRef.nativeElement, 'fa-layers');\n      ensureCss(this.document, this.config);\n      this.fixedWidth = typeof this.fixedWidth === 'boolean' ? this.fixedWidth : this.config.fixedWidth;\n    }\n    ngOnChanges(changes) {\n      if ('size' in changes) {\n        if (changes.size.currentValue != null) {\n          this.renderer.addClass(this.elementRef.nativeElement, `fa-${changes.size.currentValue}`);\n        }\n        if (changes.size.previousValue != null) {\n          this.renderer.removeClass(this.elementRef.nativeElement, `fa-${changes.size.previousValue}`);\n        }\n      }\n    }\n    static {\n      this.ɵfac = function FaLayersComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || FaLayersComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(FaConfig));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: FaLayersComponent,\n        selectors: [[\"fa-layers\"]],\n        hostVars: 2,\n        hostBindings: function FaLayersComponent_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"fa-fw\", ctx.fixedWidth);\n          }\n        },\n        inputs: {\n          size: \"size\",\n          fixedWidth: \"fixedWidth\"\n        },\n        features: [i0.ɵɵNgOnChangesFeature],\n        ngContentSelectors: _c0,\n        decls: 1,\n        vars: 0,\n        template: function FaLayersComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵprojection(0);\n          }\n        },\n        encapsulation: 2\n      });\n    }\n  }\n  return FaLayersComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet FaLayersCounterComponent = /*#__PURE__*/(() => {\n  class FaLayersCounterComponent {\n    constructor(parent, sanitizer) {\n      this.parent = parent;\n      this.sanitizer = sanitizer;\n      this.document = inject(DOCUMENT);\n      this.config = inject(FaConfig);\n      faWarnIfParentNotExist(this.parent, 'FaLayersComponent', this.constructor.name);\n    }\n    ngOnChanges(changes) {\n      if (changes) {\n        const params = this.buildParams();\n        this.updateContent(params);\n      }\n    }\n    buildParams() {\n      return {\n        title: this.title,\n        classes: this.position != null ? [`fa-layers-${this.position}`] : undefined\n      };\n    }\n    updateContent(params) {\n      ensureCss(this.document, this.config);\n      this.renderedHTML = this.sanitizer.bypassSecurityTrustHtml(counter(this.content || '', params).html.join(''));\n    }\n    static {\n      this.ɵfac = function FaLayersCounterComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || FaLayersCounterComponent)(i0.ɵɵdirectiveInject(FaLayersComponent, 8), i0.ɵɵdirectiveInject(i2.DomSanitizer));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: FaLayersCounterComponent,\n        selectors: [[\"fa-layers-counter\"]],\n        hostAttrs: [1, \"ng-fa-layers-counter\"],\n        hostVars: 1,\n        hostBindings: function FaLayersCounterComponent_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵhostProperty(\"innerHTML\", ctx.renderedHTML, i0.ɵɵsanitizeHtml);\n          }\n        },\n        inputs: {\n          content: \"content\",\n          title: \"title\",\n          position: \"position\"\n        },\n        features: [i0.ɵɵNgOnChangesFeature],\n        decls: 0,\n        vars: 0,\n        template: function FaLayersCounterComponent_Template(rf, ctx) {},\n        encapsulation: 2\n      });\n    }\n  }\n  return FaLayersCounterComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet FaLayersTextComponent = /*#__PURE__*/(() => {\n  class FaLayersTextComponent {\n    constructor(parent, sanitizer) {\n      this.parent = parent;\n      this.sanitizer = sanitizer;\n      this.document = inject(DOCUMENT);\n      this.config = inject(FaConfig);\n      faWarnIfParentNotExist(this.parent, 'FaLayersComponent', this.constructor.name);\n    }\n    ngOnChanges(changes) {\n      if (changes) {\n        const params = this.buildParams();\n        this.updateContent(params);\n      }\n    }\n    /**\n     * Updating params by component props.\n     */\n    buildParams() {\n      const classOpts = {\n        flip: this.flip,\n        border: this.border,\n        inverse: this.inverse,\n        size: this.size || null,\n        pull: this.pull || null,\n        rotate: this.rotate || null,\n        fixedWidth: this.fixedWidth\n      };\n      const parsedTransform = typeof this.transform === 'string' ? parse.transform(this.transform) : this.transform;\n      const styles = {};\n      if (classOpts.rotate != null && !isKnownRotateValue(classOpts.rotate)) {\n        styles['--fa-rotate-angle'] = `${classOpts.rotate}`;\n      }\n      return {\n        transform: parsedTransform,\n        classes: faClassList(classOpts),\n        title: this.title,\n        styles\n      };\n    }\n    updateContent(params) {\n      ensureCss(this.document, this.config);\n      this.renderedHTML = this.sanitizer.bypassSecurityTrustHtml(text(this.content || '', params).html.join('\\n'));\n    }\n    static {\n      this.ɵfac = function FaLayersTextComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || FaLayersTextComponent)(i0.ɵɵdirectiveInject(FaLayersComponent, 8), i0.ɵɵdirectiveInject(i2.DomSanitizer));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: FaLayersTextComponent,\n        selectors: [[\"fa-layers-text\"]],\n        hostAttrs: [1, \"ng-fa-layers-text\"],\n        hostVars: 1,\n        hostBindings: function FaLayersTextComponent_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵhostProperty(\"innerHTML\", ctx.renderedHTML, i0.ɵɵsanitizeHtml);\n          }\n        },\n        inputs: {\n          content: \"content\",\n          title: \"title\",\n          flip: \"flip\",\n          size: \"size\",\n          pull: \"pull\",\n          border: \"border\",\n          inverse: \"inverse\",\n          rotate: \"rotate\",\n          fixedWidth: \"fixedWidth\",\n          transform: \"transform\"\n        },\n        features: [i0.ɵɵNgOnChangesFeature],\n        decls: 0,\n        vars: 0,\n        template: function FaLayersTextComponent_Template(rf, ctx) {},\n        encapsulation: 2\n      });\n    }\n  }\n  return FaLayersTextComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet FontAwesomeModule = /*#__PURE__*/(() => {\n  class FontAwesomeModule {\n    static {\n      this.ɵfac = function FontAwesomeModule_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || FontAwesomeModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: FontAwesomeModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n    }\n  }\n  return FontAwesomeModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FaConfig, FaDuotoneIconComponent, FaIconComponent, FaIconLibrary, FaLayersComponent, FaLayersCounterComponent, FaLayersTextComponent, FaStackComponent, FaStackItemSizeDirective, FontAwesomeModule };\n//# sourceMappingURL=angular-fontawesome.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}