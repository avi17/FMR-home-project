{"ast":null,"code":"import { FormBuilder } from \"@angular/forms\";\nimport { Store } from \"@ngrx/store\";\nimport * as fromReducer from \"../../store/orders/orders.reducer\";\nimport * as fromActions from \"../../store/orders/orders.actions\";\nimport { OrderObject } from \"../../store/modal/order.modal\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@ngrx/store\";\nexport let OrderOrdersComponent = /*#__PURE__*/(() => {\n  class OrderOrdersComponent {\n    constructor(formBuilder, store) {\n      this.formBuilder = formBuilder;\n      this.store = store;\n      this.task = \"\";\n      this.userForm = {};\n      this.allOrders$ = store.select(fromReducer.selectAllOrders);\n      //this.allOrders$.subscribe((res) => console.log(res));\n      this.count$ = store.select(fromReducer.OrdersCount);\n      this.userIds$ = store.select(fromReducer.selectOrderIds);\n      this.userById$ = store.select(fromReducer.selectCurrentOrder);\n      this.userId = 0;\n    }\n    ngOnInit() {\n      this.store.dispatch(fromActions.LoadOrders());\n    }\n    createBlankOrderForm() {\n      this.userForm = this.formBuilder.group({\n        usersArray: this.formBuilder.array([])\n      });\n    }\n    createOrderFormForAdd() {\n      this.createBlankOrderForm();\n      this.addMoreControlForAdd();\n    }\n    get usersFormArray() {\n      console.log(\"@hereee\");\n      return this.userForm?.get(\"usersArray\");\n    }\n    addMoreControlForAdd() {\n      let ag = this.formBuilder.group(new OrderObject());\n      this.usersFormArray.push(ag);\n    }\n    updateOrderForm() {\n      this.createBlankOrderForm();\n      this.allOrders$.subscribe(users => {\n        console.log(\"updateOrderForm\" + users);\n        if (users && users.length > 0) {\n          let user = users[0];\n          console.log(\"updateOrderForm\" + user);\n          let ag = this.formBuilder.group(user);\n          this.usersFormArray.push(ag);\n        }\n      });\n    }\n    addMoreControlForUpdate() {\n      this.allOrders$.subscribe(users => {\n        if (users && users.length > 0 && this.usersFormArray?.length < users.length) {\n          let len = this.usersFormArray.length;\n          let Order = users[len];\n          let ag = this.formBuilder.group(Order);\n          this.usersFormArray.push(ag);\n        }\n      });\n    }\n    deleteFormArrayControl(idx) {\n      this.usersFormArray.removeAt(idx);\n    }\n    addOrderView() {\n      this.task = \"add\";\n      this.createOrderFormForAdd();\n    }\n    updateOrderView() {\n      this.task = \"update\";\n      this.updateOrderForm();\n    }\n    removeOrderView() {\n      this.task = \"remove\";\n      this.createBlankOrderForm();\n      this.allOrders$.subscribe(users => {\n        this.createBlankOrderForm();\n        users.forEach(Order => {\n          let ag = this.formBuilder.group({\n            OrderData: Order,\n            chk: false\n          });\n          this.usersFormArray.push(ag);\n        });\n      });\n    }\n    userByIdView() {\n      this.task = \"select\";\n    }\n    onFormSubmitForAdd() {\n      if (this.usersFormArray.length === 1) {\n        this.addOrder(this.usersFormArray.at(0).value);\n      } else if (this.usersFormArray.length > 1) {\n        this.addOrders(this.usersFormArray.value);\n      }\n      this.createBlankOrderForm();\n      this.loadAllOrders();\n    }\n    onFormSubmitForUpdate() {\n      if (this.usersFormArray.length === 1) {\n        this.updateOrder(this.usersFormArray.at(0).value);\n      } else if (this.usersFormArray.length > 1) {\n        this.updateOrders(this.usersFormArray.value);\n      }\n      this.createBlankOrderForm();\n      this.loadAllOrders();\n    }\n    onFormSubmitForRemove() {\n      let OrderIdsToDelete = [];\n      this.usersFormArray.controls.forEach(result => {\n        if (result.get(\"chk\")?.value) {\n          OrderIdsToDelete.push(result.get(\"OrderData\")?.value.id);\n        }\n      });\n      if (OrderIdsToDelete.length == 1) {\n        this.removeOrder(OrderIdsToDelete[0]);\n      } else if (OrderIdsToDelete.length > 1) {\n        this.removeOrders(OrderIdsToDelete);\n      }\n    }\n    addOrder(data) {\n      if (data == null) return;\n      this.store.dispatch(fromActions.AddOrder({\n        payload: {\n          user: data\n        }\n      }));\n    }\n    addOrders(data) {\n      if (data == null) return;\n      this.store.dispatch(fromActions.AddOrders({\n        payload: {\n          users: data\n        }\n      }));\n    }\n    updateOrder(data) {\n      if (data == null) return;\n      this.store.dispatch(fromActions.UpdateOrder({\n        payload: {\n          user: {\n            id: data.id,\n            changes: data\n          }\n        }\n      }));\n    }\n    updateOrders(data) {\n      if (data == null) return;\n      let allUpdates = data.map(Order => Object.assign({}, {\n        id: Order.id,\n        changes: Order\n      }));\n      this.store.dispatch(fromActions.UpdateOrders({\n        payload: {\n          users: allUpdates\n        }\n      }));\n    }\n    removeOrder(userId) {\n      if (userId == null) return;\n      this.store.dispatch(fromActions.RemoveOrder({\n        payload: {\n          id: userId\n        }\n      }));\n    }\n    removeOrders(userIds) {\n      if (userIds == null) return;\n      this.store.dispatch(fromActions.RemoveOrders({\n        payload: {\n          ids: userIds\n        }\n      }));\n    }\n    clearAllOrders() {\n      this.store.dispatch(fromActions.ClearOrders());\n    }\n    loadAllOrders() {\n      this.task = \"all\";\n    }\n    selectOrderById() {\n      this.store.dispatch(fromActions.SelectOrder({\n        payload: {\n          userId: this.userId\n        }\n      }));\n    }\n    static {\n      this.ɵfac = function OrderOrdersComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || OrderOrdersComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Store));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: OrderOrdersComponent,\n        selectors: [[\"user-orders\"]],\n        standalone: false,\n        decls: 2,\n        vars: 0,\n        template: function OrderOrdersComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"h1\");\n            i0.ɵɵtext(1, \"Orders\");\n            i0.ɵɵelementEnd();\n          }\n        },\n        encapsulation: 2\n      });\n    }\n  }\n  return OrderOrdersComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}