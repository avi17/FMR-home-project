{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { distinctUntilChanged, filter, switchMap } from \"rxjs\";\nimport { Store } from \"@ngrx/store\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ngrx/store\";\nexport let AppService = /*#__PURE__*/(() => {\n  class AppService {\n    constructor(http, store) {\n      this.http = http;\n      this.store = store;\n      this.orderUrl = \"/api/orders\";\n      this.userUrl = \"/api/users\";\n    }\n    getAllOrders() {\n      return this.http.get(this.orderUrl);\n    }\n    getUserDetails() {\n      return this.http.get(this.userUrl);\n    }\n    listenToUserChanges() {\n      return this.store.select('selectedUserId').pipe(distinctUntilChanged(),\n      // מונע קריאות כפולות אם ה-ID לא השתנה\n      filter(userId => !!userId),\n      // מבטיח שהערך אינו ריק\n      switchMap(userId => this.getUserDetails(userId)) // ביטול קריאה קודמת במקרה של שינוי\n      );\n    }\n    static {\n      this.ɵfac = function AppService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || AppService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Store));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AppService,\n        factory: AppService.ɵfac\n      });\n    }\n  }\n  return AppService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}